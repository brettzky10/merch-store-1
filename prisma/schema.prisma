

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model printfulOrder {
  id               Int      @id @default(autoincrement())
  externalId       String   @unique
  status           String
  shippingMethod   String
  shippingService   String
  createdAt        DateTime
  updatedAt        DateTime
  recipientName    String
  recipientAddress String
  recipientCity    String
  recipientState   String
  recipientCountry String
  recipientZip     String
  recipientPhone   String
  recipientEmail   String
  totalCost        Float
  currency         String
  costsCurrency    String?
  costsSubtotal    Float?
  costsDiscount    Float?
  costsShipping    Float?
  costsDigitization Float?
  costsAdditional   Float?
  costsTax        String?
  costsVat        Float?
  costsTotal      Float?
  retailCurrency  String?
  retailSubtotal  Float?
 retailDiscount   Float?
 retailShipping   Float?
 retailTotal      Float?
  dashboardUrl     String?
  trackingUrl          String?
  shipDate             DateTime?
  hasIncompleteItems   Boolean   @default(false)
  hasDiscontinuedItems Boolean   @default(false)
  hasOutOfStockItems   Boolean   @default(false)
}


model owner {
  id                String     @id @default(uuid())
  email             String?    @unique
  name              String?
  userId            String
  customerId        String?    @unique
  orders            order[]
  products          product[]
  

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}


model product {
  id          String @id @default(uuid())
  name          String
  priceInCents  Int
  quantity      Int  @default(1)
  imagePath     String
  description String @default("")
  isAvailableForPurchase     Boolean @default(true)
  discountCodes discount[]

  owner               owner     @relation( fields: [ownerId], references: [id])
  ownerId             String

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model discount {
  id             String           @id @default(uuid())
  code           String           @unique
  discountAmount Int
  discountType   discountCodeType
  uses           Int              @default(0)
  isActive       Boolean          @default(true)
  allProducts    Boolean          @default(false)
  createdAt      DateTime         @default(now())
  limit          Int?
  expiresAt      DateTime?
  storeId        String
  products       product[]
  orders          order[]
}

enum discountCodeType {
  PERCENTAGE
  FIXED
}


model order{
  id String @id @default(uuid())
  owner  owner     @relation(fields: [ownerId], references: [id])
  ownerId   String
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  discountCodeId String?
  discountCode   discount? @relation(fields: [discountCodeId], references: [id], onDelete: Restrict)

}
